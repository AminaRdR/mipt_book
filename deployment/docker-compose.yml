
version: "3.9"

services:
  # Запускаем микросервис бэкэнда
  backend:
    build:
      context: ../backend/backend/
      dockerfile: Dockerfile
    environment:
      - DJANGO_DEBUG=True
    networks:
      - mipt_book
    image: "mipt_book/back:v2"
    container_name: mipt_book_backend_v2
    ports:
      - "8000:8000"
    volumes:
      - ../backend/backend:/usr/src/app
    depends_on:
      pgdb:
        condition: service_healthy

  # Запускаем микросервис авторизации
  users:
    build:
      context: ../users/authorization/
      dockerfile: Dockerfile
    environment:
      - DJANGO_DEBUG=True
    networks:
      - mipt_book
    image: "mipt_book/users:v2"
    container_name: mipt_book_users_v2
    ports:
      - "8088:8088"
    volumes:
      - ../users/authorization:/usr/src/app
    depends_on:
      pgdb_users:
        condition: service_healthy

  # Запускаем брокер сообщений для планировщика задач celery
  redis:
    image: redis
    restart: always
    networks:
      - mipt_book
    ports:
      - "6379:6379"

  # Запускаем базу данных для микросервиса бэкэнда
  pgdb:
    image: postgres:latest
    networks:
      - mipt_book
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres_mipt
      - POSTGRES_USER=postgres_mipt
      - POSTGRES_PASSWORD=mipt_book123
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    container_name: pgdb
    volumes:
      - ../backend/backend/pgdb:/var/lib/postgresql/data/

  # Запускаем базу данных для микросервиса авторизации
  pgdb_users:
    image: postgres:latest
    networks:
      - mipt_book
    ports:
      - "5431:5431"
    environment:
      - POSTGRES_DB=postgres_mipt_users
      - POSTGRES_USER=postgres_mipt_users
      - POSTGRES_PASSWORD=mipt_book_users123
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p 5431'" ]
      interval: 10s
      timeout: 13s
      retries: 3
    container_name: pgdb_users
    volumes:
      - ../users/authorization/pgdb_users:/var/lib/postgresql/data/

  # Запускаем микросервис отправки сообщений по протоколу SMTP
  email:
    build:
      context: ../email/emailservice/
      dockerfile: Dockerfile
    environment:
      - DJANGO_DEBUG=True
    networks:
      - mipt_book
    image: "mipt_book/email:v1"
    container_name: mipt_book_email_v1
    #expose:
    #  - 8083
    ports:
      - "8083:8083"
    volumes:
      - ../email/emailservice:/usr/src/app

  # Запускаем планировщик событий celery для микросервиса отправки сообщений
  worker:
    restart: always
    build:
      context: ../email/emailservice/
      dockerfile: Dockerfile
    networks:
      - mipt_book
    volumes:
      - ../email/emailservice:/usr/src/app
    depends_on:
      - redis
      - email
    command: 'celery -A emailservice worker -l info'

  # Запускаем beat для брокера сообщений
  beat:
    restart: always
    build:
      context: ../email/emailservice/
      dockerfile: Dockerfile
    networks:
      - mipt_book
    volumes:
      - ../email/emailservice:/usr/src/app
    depends_on:
      - redis
      - email
      - worker
    command: 'celery -A emailservice worker -l info'

  # Запускаем фронтенд телеграм приложения
  tg_app_frontend:
    build:
      context: ../tg_app/tg_miptbook  # Путь к директории с React-приложением
      dockerfile: Dockerfile  # Имя Dockerfile (если отличается от стандартного)
    ports:
      - "8081:3000"  # Проброс портов: хост:контейнер

  # Запускаем фронтенд телеграм приложения
  #web_app_frontend:
  #  build:
  #    context: ../frontend  # Путь к директории с React-приложением
  #    dockerfile: Dockerfile  # Имя Dockerfile (если отличается от стандартного)
  #    args:
  #      VITE_BACKEND_URL: https://mipt.site:8000
  #  ports:
  #    - "80:8080"  # Проброс портов: хост:контейнер
  #  image: "mipt_book/frontend:v1"
  #  networks:
  #    - mipt_book
  #  volumes:
  #    - ../frontend:/usr/src/app

  front:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        VITE_BACKEND_URL: http://mipt.site:8000
    networks:
      - mipt_book
    image: "mipt_book/front:v1"
    container_name: mipt_book_front_v1
    ports:
      - "80:8080"
      - "443:443"
    volumes:
      - ./frontend.conf.d:/etc/nginx/http.d

  # документация к проекту
  #swagger-ui:
  #  image: swaggerapi/swagger-ui
  #  container_name: swagger-ui
  #  ports:
  #    - "8001:8080"
  #  volumes:
  #    - ../swagger:/usr/share/nginx/html/swagger
  #  environment:
  #    API_URL: ../swagger/api.yaml

  # nginx
  #nginx:
  #  container_name: nginx_v2
  #  working_dir: /nginx
  #  image: nginx:stable-alpine
  #  restart: always
  #  networks:
  #    - mipt_book
  #  ports:
  #    - "80:80"
  #  volumes:
  #    - ./nginx/dev/:/etc/nginx/conf.d:ro
  #  depends_on:
  #    - email
  #    - backend
  #    - users



networks:
  mipt_book:
    name: mipt_book
  mipt_book_users:
    name: mipt_book_users
