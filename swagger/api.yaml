openapi: 3.0.3
info:
  title: MIPT BOOK - OpenAPI 3.0
  description: |-
    Этот проект представляет собой веб-приложение, разработанное для упрощения процесса бронирования аудиторий. Система помогает студенту и преподавателю найти аудиторию в условиях выскокой занятости кабинетов. Проект свяляется open-source решением для возможности привлечения новых компетенций.

    Пользователю документации предлагается самостоятельно изучить API проекта и присоединиться к дружной команде разработчиков самого полезного ресурса МФТИ.
    
    Основные ссылки:
    - [Сайт](https://mipt.site)
    - [Гитхаб проекта](https://github.com/st2257st2257/mipt_book)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: backend
    description: Адрес начинается с mipt.site:8000
    externalDocs:
      description: Подробнее
      url: https://github.com/st2257st2257/mipt_book/tree/dev/backend
  - name: user
    description: Адрес начинается с mipt.site:8088
    externalDocs:
      description: Подробнее
      url: https://github.com/st2257st2257/mipt_book/tree/dev/users
  - name: email
    description: Адрес начинается с mipt.site:8083
    externalDocs:
      description: Подробнее
      url: https://github.com/st2257st2257/mipt_book/tree/dev/email
paths:
  /book:
    post:
      tags:
        - backend
      summary: Отправка формы бронирования
      description: Отправка данных для бронирования аудитории
      operationId: addBook
      requestBody:
        description: Create a new booking item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBook'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddBook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddBook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewBook'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewBook'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/book:
    get:
      tags:
        - backend
      summary: Получение списка текущих бронирований
      description: Получение списка забронированных аудиторий поо фильтрам
      operationId: findBook
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/institute:
    get:
      tags:
        - backend
      summary: Получение списка заданий
      description: Получение списка доступных в системе институтов
      operationId: findPetsByStatuss
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institute'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institute'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/building:
    get:
      tags:
        - backend
      summary: Получение списка институтов
      description: Получение списка доступных в системе зданий по фильтру
      operationId: findBuildingByNameAndInstitute
      parameters:
        - name: building_name
          in: query
          description: Получение зданий по указанному измени здания
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - ГК
              - ЛК
              - Цифра
        - name: institute
          in: query
          description: Получение зданий по имени института
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - МФТИ
              - МГУ
              - ВШЭ
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/audience:
    get:
      tags:
        - backend
      summary: Получение списка доступных аудиторий
      description: Получение списка доступных в системе аудиторий по фильтрам
      operationId: findAudienceByNameAndInstituteAndBuildingName
      parameters:
        - name: building_name
          in: query
          description: Получение аудиторий по указанному измени здания
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - ГК
              - ЛК
              - Цифра
        - name: institute
          in: query
          description: Получение аудиторий по имени института
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - МФТИ
              - МГУ
              - ВШЭ
        - name: status
          in: query
          description: Получение аудиторий по стутусу
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - Свободно
              - Занято
              - Скоро освободиться
              - Отсутствует для бронирования
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/audience_status:
    get:
      tags:
        - backend
      summary: Получение статусов аудиторий
      description: Получение списка стутусов, которые можно присвоить текущим аудиториям
      operationId: findAudienceStatus
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AudienceStatus'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AudienceStatus'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/roles:
    get:
      tags:
        - user
      summary: Получение ролей пользователя
      description: Доступные роли пользователей в системе.
      operationId: getRoles
      responses:
        '200':
          description: Доступные роли пользователей в системе.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/institute_group:
    get:
      tags:
        - user
      summary: Получение институтских групп
      description: Доступные институтскии группы в системе.
      operationId: getInstituteGroup
      responses:
        '200':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstituteGroup'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstituteGroup'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/preferences:
    get:
      tags:
        - user
      summary: Получение предпочтений пользователя
      description: Доступные предпочтения, которые может выбрать пользователь.
      operationId: getPreferences
      responses:
        '200':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Preferences'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Preferences'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/access:
    get:
      tags:
        - user
      summary: Получение доступов в системе
      description: Доступы, которые могу получть пользователи в системе.
      operationId: getAccess
      responses:
        '200':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Access'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Access'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /token:
    post:
      tags:
        - user
      summary: Получение токена авторизации
      description: Отправка лигина и пароля для получения токена авторизации.
      operationId: getToken
      requestBody:
        description: Get token username&pass
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginPassword'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLoginPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLoginPassword'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
            application/xml:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /register:
    post:
      tags:
        - user
      summary: Регистрация нового пользователя
      description: Регистрация через лигин, пароль и email.
      operationId: registrateNewUser
      requestBody:
        description: Get new_user info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/xml:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewUser'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /get-info:
    get:
      tags:
        - user
      summary: Регистрация нового пользователя
      description: Регистрация через лигин, пароль и email.
      operationId: getInfoUser
      parameters:
      - name: auth
        in: header
        description: an authorization header
        schema:
          $ref: '#/components/schemas/HeaderAuth'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserData'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Building:
      type: object
      properties:
        name:
          type: string
          example: ГК
        institute:
          type: Institute
          xml:
            name: institute
          $ref: '#/components/schemas/Institute'
        description:
          type: string
          example: Главный корпус
      xml:
        name: building
    Book:
      type: object
      properties:
        audience:
          type: Audience
          xml:
            name: audience
          $ref: '#/components/schemas/Audience'
        number_bb:
          type: integer
          example: 2.0
        pair_number:
          type: integer
          example: 2
        date:
          type: string
          example: "01.01.1970"
        booking_time:
          type: string
          example: "09:41:00.112233"
        user:
          type: UsersWallet
          xml:
            name: user
          $ref: '#/components/schemas/UsersWallet'
      xml:
        name: building
    Audience:
      type: object
      properties:
        number:
          type: string
          example: 510
        building:
          type: Building
          xml:
            name: building
          $ref: '#/components/schemas/Building'
        number_of_users:
          type: integer
          example: 20
        audience_status:
          type: AudienceStatus
          xml:
            name: audience_status
          $ref: '#/components/schemas/AudienceStatus'
        description:
          type: string
          example: Аудитория 510
      xml:
        name: audience_status
    AudienceStatus:
      type: object
      properties:
        name:
          type: string
          example: Свободно
        description:
          type: string
          example: Аудитория Свободна
      xml:
        name: audience_status
    Institute:
      type: object
      properties:
        name:
          type: string
          example: МФТИ
        description:
          type: string
          example: Московский Физико-Технический Институт
      xml:
        name: institute
    UsersWallet:
      type: object
      properties:
        username:
          type: string
          example: st2257
      xml:
        name: institute
    AddBook:
      type: object
      properties:
        type:
          type: string
          example: book_audience
        token:
          type: string
          example: token_from_auth
        audience:
          type: string
          example: 512
        user:
          type: string
          example: st2257
        number_bb:
          type: integer
          example: 2
        pair_number:
          type: integer
          example: 2
      xml:
        name: add_book
    NewBook:
      type: object
      properties:
        result:
          type: boolean
          example: true
        audience:
          type: string
          example: 512
        user:
          type: string
          example: st2257
      xml:
        name: new_book
    UserLoginPassword:
      type: object
      properties:
        username:
          type: string
          example: test_user
        password:
          type: string
          example: test_pass
      xml:
        name: user_login_password
    Token:
      type: object
      properties:
        token:
          type: string
          example: 285144ded10d0f5477da0dd022d534eadf580500
      xml:
        name: token
    Register:
      type: object
      properties:
        username:
          type: string
          example: test_user
        pass:
          type: string
          example: test_pass
        email:
          type: string
          example: example@test.com
      xml:
        name: register
    NewUser:
      type: object
      properties:
        username:
          type: string
          example: test_user
        email:
          type: string
          example: example@test.com
        first_name:
          type: string
          example:
        last_name:
          type: string
          example:
        third_name:
          type: string
          example:
        book_rate:
          type: integer
          example: 7
        preferences:
          type: array
          xml:
            name: preferences
            wrapped: true
          items:
            $ref: '#/components/schemas/Preferences'

      xml:
        name: register
    Role:
      type: object
      properties:
        name:
          type: string
          example: Гость
        description:
          type: string
          example: Не зарегистрированный посетитель сайта
      xml:
        name: role
    HeaderAuth:
      type: object
      properties:
        Authorization:
          type: string
          example: Token 285144ded10d0f5477da0dd022d534eadf580500
      xml:
        name: role
    InstituteGroup:
      type: object
      properties:
        name:
          type: string
          example: Б02-001
        description:
          type: string
          example: Группа бакалавриата номер Б02-001
      xml:
        name: institute_group
    Preferences:
      type: object
      properties:
        name:
          type: string
          example: Тишина
        description:
          type: string
          example: Тишина
      xml:
        name: institute_group
    Access:
      type: object
      properties:
        description:
          type: string
          example: Просмотр бронирования
      xml:
        name: institute_group
    UserData:
      type: object
      properties:
        username:
          type: string
          example: st2257
        user_name:
          type: UserName
          xml:
            name: user_name
          $ref: '#/components/schemas/UserName'
        email:
          type: string
          example: example@mipt.site
        book_rate:
          type: string
          example: st2257
        institute_group:
          type: string
          example: Б02-003
        user_role:
          type: string
          example: Арендатор
    UserName:
      type: object
      properties:
        first_name:
          type: string
          example: first_test
        last_name:
          type: string
          example: last_test
        third_name:
          type: string
          example: third_test
      xml:
        name: user_name
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
