openapi: 3.0.3
info:
  title: MIPT BOOK - OpenAPI 3.0
  description: |-
    Этот проект представляет собой веб-приложение, разработанное для упрощения процесса бронирования аудиторий. Система помогает студенту и преподавателю найти аудиторию в условиях выскокой занятости кабинетов. Проект свяляется open-source решением для возможности привлечения новых компетенций.

    Пользователю документации предлагается самостоятельно изучить API проекта и присоединиться к дружной команде разработчиков самого полезного ресурса МФТИ.
    
    Основные ссылки:
    - [Сайт](https://mipt.site)
    - [Гитхаб проекта](https://github.com/st2257st2257/mipt_book)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: backend
    description: Адрес начинается с :8088/
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /book:
    post:
      tags:
        - backend
      summary: Отправка формы бронирования
      description: Отправка данных для бронирования аудитории
      operationId: addBook
      requestBody:
        description: Create a new booking item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBook'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddBook'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddBook'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewBook'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewBook'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/book:
    get:
      tags:
        - backend
      summary: Получение списка текущих бронирований
      description: Получение списка забронированных аудиторий поо фильтрам
      operationId: findBook
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/institute:
    get:
      tags:
        - backend
      summary: Получение списка заданий
      description: Получение списка доступных в системе институтов
      operationId: findPetsByStatuss
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institute'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institute'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/building:
    get:
      tags:
        - backend
      summary: Получение списка институтов
      description: Получение списка доступных в системе зданий по фильтру
      operationId: findBuildingByNameAndInstitute
      parameters:
        - name: building_name
          in: query
          description: Получение зданий по указанному измени здания
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - ГК
              - ЛК
              - Цифра
        - name: institute
          in: query
          description: Получение зданий по имени института
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - МФТИ
              - МГУ
              - ВШЭ
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/audience:
    get:
      tags:
        - backend
      summary: Получение списка доступных аудиторий
      description: Получение списка доступных в системе аудиторий по фильтрам
      operationId: findAudienceByNameAndInstituteAndBuildingName
      parameters:
        - name: building_name
          in: query
          description: Получение аудиторий по указанному измени здания
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - ГК
              - ЛК
              - Цифра
        - name: institute
          in: query
          description: Получение аудиторий по имени института
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - МФТИ
              - МГУ
              - ВШЭ
        - name: status
          in: query
          description: Получение аудиторий по стутусу
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - Свободно
              - Занято
              - Скоро освободиться
              - Отсутствует для бронирования
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /base-info/audience_status:
    get:
      tags:
        - backend
      summary: Получение статусов аудиторий
      description: Получение списка стутусов, которые можно присвоить текущим аудиториям
      operationId: findAudienceStatus
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AudienceStatus'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AudienceStatus'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Building:
      type: object
      properties:
        name:
          type: string
          example: ГК
        institute:
          type: Institute
          xml:
            name: institute
          $ref: '#/components/schemas/Institute'
        description:
          type: string
          example: Главный корпус
      xml:
        name: building
    Book:
      type: object
      properties:
        audience:
          type: Audience
          xml:
            name: audience
          $ref: '#/components/schemas/Audience'
        number_bb:
          type: integer
          example: 2.0
        pair_number:
          type: integer
          example: 2
        date:
          type: string
          example: "01.01.1970"
        booking_time:
          type: string
          example: "09:41:00.112233"
        user:
          type: UsersWallet
          xml:
            name: user
          $ref: '#/components/schemas/UsersWallet'
      xml:
        name: building
    Audience:
      type: object
      properties:
        number:
          type: string
          example: 510
        building:
          type: Building
          xml:
            name: building
          $ref: '#/components/schemas/Building'
        number_of_users:
          type: integer
          example: 20
        audience_status:
          type: AudienceStatus
          xml:
            name: audience_status
          $ref: '#/components/schemas/AudienceStatus'
        description:
          type: string
          example: Аудитория 510
      xml:
        name: audience_status
    AudienceStatus:
      type: object
      properties:
        name:
          type: string
          example: Свободно
        description:
          type: string
          example: Аудитория Свободна
      xml:
        name: audience_status
    Institute:
      type: object
      properties:
        name:
          type: string
          example: МФТИ
        description:
          type: string
          example: Московский Физико-Технический Институт
      xml:
        name: institute
    UsersWallet:
      type: object
      properties:
        username:
          type: string
          example: st2257
      xml:
        name: institute
    AddBook:
      type: object
      properties:
        type:
          type: string
          example: book_audience
        token:
          type: string
          example: token_from_auth
        audience:
          type: string
          example: 512
        user:
          type: string
          example: st2257
        number_bb:
          type: integer
          example: 2
        pair_number:
          type: integer
          example: 2
      xml:
        name: add_book
    NewBook:
      type: object
      properties:
        result:
          type: boolean
          example: true
        audience:
          type: string
          example: 512
        user:
          type: string
          example: st2257
      xml:
        name: new_book
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
